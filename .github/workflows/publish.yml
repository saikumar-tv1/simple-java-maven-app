name: Publish package to GitHub Packages
on:
  workflow_dispatch:
jobs:
  publish-override:
    runs-on: ubuntu-latest 
    # permissions: write-all
    # permissions: 
    #   id-token: write
    #   contents: write
    #   packages: write
    #   repository-projects: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      # - name: Publish package 
      #   run: |
      #     # echo "//registry/package/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
      #     # mvn --batch-mode deploy --settings .github/settings.xml
      #     # curl -X DELETE -u ${{github.actor}}:${{ secrets.GITHUB_TOKEN }} "https://maven.pkg.github.com/saikumar-tv/github_test_packages/com/com.mycompany.app.my-app/package/1.1-SNAPSHOT"
          
      #     curl -L \
      #     -X DELETE \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #     https://api.github.com/user/packages/maven/com.mycompany.app.my-app/versions/31878359
          
      #     mvn --batch-mode deploy
      #     VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>([^<]+)<\/version>.*/\1/')
      #     echo "VERSION=${VERSION}"
      #     PACKAGE_NAME=$(grep -m 1 '<groupId>' pom.xml | sed -E 's/.*<groupId>([^<]+)<\/groupId>.*/\1/').$(grep -m 1 '<artifactId>' pom.xml | sed -E 's/.*<artifactId>([^<]+)<\/artifactId>.*/\1/')
      #     echo "PACKAGE_NAME=${PACKAGE_NAME}"
          
      #     curl -L \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #     https://api.github.com/user/packages/maven/${PACKAGE_NAME}/versions

      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: override
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     GITHUB_REPOSITORY=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 1)
      #     echo "Organization Name: $GITHUB_REPOSITORY"
      #     # mvn --batch-mode deploy -Dmaven.deploy.skip=true -DskipTests
      #     VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>([^<]+)<\/version>.*/\1/')
      #     echo "VERSION=${VERSION}"
      #     PACKAGE_NAME=$(grep -m 1 '<groupId>' pom.xml | sed -E 's/.*<groupId>([^<]+)<\/groupId>.*/\1/').$(grep -m 1 '<artifactId>' pom.xml | sed -E 's/.*<artifactId>([^<]+)<\/artifactId>.*/\1/')
      #     echo "PACKAGE_NAME=${PACKAGE_NAME}"
          
      #     # # Fetch package versions from GitHub API
      #     RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" \
      #                   -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #                   -H "X-GitHub-Api-Version: 2022-11-28" \
      #                   "https://api.github.com/user/packages/maven/${PACKAGE_NAME}/versions")

      #     echo "RESPONSE=${RESPONSE}"
          
      #     # # Check if the RESPONSE contains the version
      #     # if echo "$RESPONSE" | grep -q "\"name\":\"$VERSION\""; then
      #     #   echo "Found version $VERSION in the package list. Deleting..."
            
      #     #   # Extract the artifact ID of the matching version
      #     #   ARTIFACT_ID=$(echo "$RESPONSE" | jq -r ".[] | select(.name == \"$VERSION\") | .id")
          
      #     #   # Delete the specific version using its artifact ID
      #     #   curl -s -X DELETE \
      #     #        -H "Accept: application/vnd.github+json" \
      #     #        -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #     #        -H "X-GitHub-Api-Version: 2022-11-28" \
      #     #        "https://api.github.com/user/packages/maven/${PACKAGE_NAME}/${ARTIFACT_ID}"
          
      #     #   echo "Version $VERSION deleted successfully."
      #     # else
      #     #    echo "Version $VERSION not found in the package list."
      #     # fi

      #     # Check if the RESPONSE contains the version
      #     if echo "$RESPONSE" | jq -r ".[].name" | grep -q "${VERSION}"; then
      #       echo "Found version ${VERSION} in the package list."
          
      #       # Extract the artifact ID of the matching version
      #       ARTIFACT_ID=$(echo "$RESPONSE" | jq -r ".[] | select(.name == \"${VERSION}\") | .id")
      #       echo "ARTIFACT_ID=${ARTIFACT_ID}"
            
      #       # Delete the specific version using its artifact ID
      #       curl -L \
      #       -X DELETE \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "Authorization: Bearer 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" \
      #       -H "X-GitHub-Api-Version: 2022-11-28" \
      #       https://api.github.com/user/packages/maven/"${PACKAGE_NAME}"/versions/"${ARTIFACT_ID}"
            
      #       echo "Version ${VERSION} deleted successfully."
      #       mvn --batch-mode deploy
          
      #     else
      #       echo "Version ${VERSION} not found in the package list."
      #       mvn --batch-mode deploy
      #     fi
      - name: override organization
        run: |
          # # Fetch package versions from GitHub API
          RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" \
                        -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                        -H "X-GitHub-Api-Version: 2022-11-28" \
                        "https://api.github.com/orgs/pinch-ai/packages/maven/ai.pinch.foundation/versions")

          echo "RESPONSE=${RESPONSE}"

          # REMOTE_VERSIONS=$(curl -L \
          #                   -H "Accept: application/vnd.github+json" \
          #                   -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          #                   -H "X-GitHub-Api-Version: 2022-11-28" \
          #                   "https://api.github.com/orgs/pinch-ai/packages/maven/ai.pinch.foundation/versions")

          # echo "REMOTE_VERSIONS=${REMOTE_VERSIONS}"
